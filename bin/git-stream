#!/usr/bin/env bash

GITSTREAM_DEBUG=0
WORKING_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

usage() {
    version
    echo "Usage: git stream <subcommand>"
    echo
    echo "Available subcommands are:"
    echo
    echo "init      Initialize your repo for use with Git Stream"
    echo "feature   Work with Features"
    echo "hotfix    Work with Hotfixes"
    echo "release   Work with Releases"
    echo "help      Show this help"
    echo "version   Show version"
}

version() {
    echo "Git Stream v0.8.1"
}

git_current_branch () {
  local _saved_ifs _branch
  _saved_ifs=${IFS}
  IFS=:
  _branch=`git branch 2> /dev/null`
  if [ $? -eq 0 ]; then
    echo -n "$1`echo ${_branch} | grep '^*' | sed -e 's/\*\ //'`$2"
  fi
  IFS=${_saved_ifs}
}

git_rev_exists() {
    if git rev-parse $1 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

git_working_dir_clean() {
    if [ -z "$(git status --porcelain 2>&1)" ]; then
      return 0
    else
      return 1
    fi
}

git_list_branches() {
    git for-each-ref --format='%(refname:short)' refs/heads/
}

git_pull() {
    if [[ -n ${DEFAULT_PUSH_REMOTE} ]]; then
        do_git pull ${DEFAULT_PUSH_REMOTE} ${WORKING_BRANCH}
    fi
}

git_push() {
    if [[ -n ${DEFAULT_PUSH_REMOTE} ]]; then
        do_git push ${DEFAULT_PUSH_REMOTE} ${WORKING_BRANCH}
    fi
}

git_push_tags() {
    if [[ -n ${DEFAULT_PUSH_REMOTE} ]]; then
        do_git push ${DEFAULT_PUSH_REMOTE} --tags
    fi
}

do_git() {
    if [ ${GITSTREAM_DEBUG} -eq 1 ]; then
        echo git "$@" >&2
    fi

    eval git $@
    return $?
}

gitstream_is_initialized() {
    if git config --get gitstream.branch.working >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

gitstream_environment() {
    if ! gitstream_is_initialized; then
        print_error "Git Stream is not initialized. Please run 'git stream init' first"
        exit 1
    fi

    VERSION_PREFIX=$(git config gitstream.prefix.version)
    FEATURE_PREFIX=$(git config gitstream.prefix.feature)
    HOTFIX_PREFIX=$(git config gitstream.prefix.hotfix)
    RELEASE_PREFIX=$(git config gitstream.prefix.release)
    WORKING_BRANCH=$(git config gitstream.branch.working)
    DEFAULT_PUSH_REMOTE=$(git config gitstream.defaultpushremote)
}

gitstream_make_branch() {
    local source_branch dest_branch

    if [ $# -ne 2 ]; then
        print_error "Wrong number of arguments for gitstream_make_branch"
        bug_error_message
        exit 1
    fi

    source_branch="$1"
    dest_branch="$2"

    if ! git_working_dir_clean; then
        print_error "Working directory not clean"
        exit 1
    fi

    if ! git_rev_exists ${source_branch}; then
        print_error "${source_branch} does not exist"
        exit 1
    fi

    if git_rev_exists ${dest_branch}; then
        print_error "${dest_branch} already exists"
        exit 1
    fi

    if ! do_git branch "${dest_branch}" "${source_branch}"; then
        print_error "Failed to create branch ${dest_branch} from ${source_branch}"
        bug_error_message
        exit 1
    fi

    if ! do_git checkout "${dest_branch}"; then
        print_error "Failed to checkout ${dest_branch}"
        bug_error_message
        exit 1
    fi
}

gitstream_checkout_branch() {
    if [ $# -ne 1 ]; then
        print_error "Wrong number of arguments for gitstream_checkout_branch"
        bug_error_message
        exit 1
    fi

    if ! git_working_dir_clean; then
        print_error "Working directory not clean"
        exit 1
    fi

    if ! do_git checkout "$1"; then
        print_error "Failed to checkout $1"
        exit 1
    fi
}

gitstream_merge() {
    local source_branch dest_branch args

    if [ $# -lt 2 ]; then
        print_error "Wrong number of arguments for gitstream_merge"
        bug_error_message
    fi

    source_branch=$1; shift
    dest_branch=$1; shift

    if [ $# -ne 0 ]; then
        args=$@
    fi

    if ! git_rev_exists ${source_branch}; then
        print_error "Branch ${source_branch} does not exist"
        exit 1
    fi

    if ! git_rev_exists ${dest_branch}; then
        print_error "Branch ${dest_branch} does not exist"
        exit 1
    fi

    gitstream_checkout_branch ${dest_branch}

    if ! do_git merge ${args} ${source_branch}; then
        do_git merge --abort
        do_git checkout ${source_branch}
        print_error "Failed to merge ${source_branch} into ${dest_branch}."
        print_error
        print_error "Either the merge was cancelled or a rebase/merge of ${source_branch} is needed."
        exit 1
    fi
}

gitstream_run_hook() {
    local hook_dir script stage type action

    stage="$1"; shift
    type="$1"; shift
    action="$1"; shift

    hook_dir="$(git rev-parse --git-dir)/hooks"
    script="${hook_dir}/${stage}-stream-${type}-${action}"

    if [ -x "$script" ]; then
        if [ ${GITSTREAM_DEBUG} -eq 1 ]; then
            echo "Running ${script} $@" >&2
        fi

        "$script" "$@"

        return 0
    fi
}

gitstream_run_hook_die() {
    local hook_dir script stage type action

    stage="$1"; shift
    type="$1"; shift
    action="$1"; shift

    hook_dir="$(git rev-parse --git-dir)/hooks"
    script="${hook_dir}/${stage}-stream-${type}-${action}"

    if [ -x "$script" ]; then
        if [ ${GITSTREAM_DEBUG} -eq 1 ]; then
            echo "Running ${script} $@" >&2
        fi

        "$script" "$@"

        if [ "$?" -gt 0 ]; then
            print_error "The hook ${script} exited with $?"
            exit 1
        fi
    fi
}

gitstream_source() {
    local command command_type file func

    command="$1"
    file="${WORKING_DIR}/git-stream-${command}"
    func="gitstream_$(echo ${command} | sed s/\-/\_/g)"

    if ! [ -e ${file} ]; then
        usage; exit 1
    fi

    source ${file}

    command_type=$(LC_ALL=C type ${func} | head -n 1)

    if [ "${command_type}" != "${func} is a function" ]; then
        usage; exit 1
    fi
}

print_error() {
    echo $1 >&2
}

bug_error_message() {
    print_error ""
    print_error "This should not have happened"
    print_error "Please report this bug at https://github.com/mrkmg/git-stream/issues/new"
}

main() {
    if [ "$#" -eq 0 ]; then
        usage; exit 1
    fi

    if [ "$1" == "--debug" ]; then
        GITSTREAM_DEBUG=1; shift
    fi

    local sub_command="$1"; shift

    case ${sub_command} in
        "-h"|"--help"|"help")
            usage; exit 0
            ;;
        "-v"|"--version"|"version")
            version; exit 0
            ;;
    esac

    gitstream_source "${sub_command}"

    gitstream_${sub_command} "$@"
}

main "$@"
